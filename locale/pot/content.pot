# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2020, Bane Sullivan, http:://banesullivan.com
# This file is distributed under the same license as the PVGeo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PVGeo \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-30 10:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:4
msgid "arrays"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:12
msgid "add_array"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:1
msgid "Adds an array to a vtkDataObject given its field association."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_combined_input_time_steps:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.AddFileName:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.add_file_name:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.need_to_read:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.Modified:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.add_model_file_name:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.need_to_readMesh:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.need_to_readModels:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.set_operation:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_normalization:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis:0
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.set_axis:0
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:0
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.set_names:0
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.get_angle:0
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_x:0
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_y:0
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_z:0
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_deltas:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.set_z_coords:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.set_z_coords_str:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotation_matrix:0
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:0
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_operation:0
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:0
#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource:0
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_x_cells:0
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_x_cells_str:0
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_y_cells:0
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_y_cells_str:0
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_z_cells:0
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_z_cells_str:0
#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.set_endian:0
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_delimiter:0
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.need_to_read:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.need_to_read:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.ubc_model_3d:0
#: ../../PVGeo/PVGeo/version.py:docstring of PVGeo.version.check_numpy:0
#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:0
#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.getVTKjsURL:0
#: ../../PVGeo/pvmacros/pipeline.py:docstring of pvmacros.pipeline.deleteDownstream:0
#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.customAxisTicks:0
#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.resetAxisTicks:0
#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.setAxisLabelsFromBounds:0
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.loadViews:0
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.saveViews:0
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShot:0
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShotViews:0
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.update:0
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.view:0
msgid "Parameters"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:3
msgid "the output data object"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:5
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:7
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:6
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:5
msgid "the field type id or name"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:7
msgid "the data array to add to the output"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:0
#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver.get_error_message:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_combined_input_time_steps:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.error_occurred:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.need_to_read:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation_names:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization_names:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalizations:0
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_input_center:0
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.lookup_conversions:0
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation:0
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation_names:0
#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader._read_extent:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.get_dtypes:0
#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.get_vtk_type:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.need_to_read:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.need_to_read:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase._read_extent:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.ubc_model_3d:0
#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:0
msgid "Returns"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:10
msgid "the output data object with the data array added"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.add_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:0
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:0
#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver.get_error_message:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_combined_input_time_steps:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:0
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.error_occurred:0
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.need_to_read:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation_names:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization_names:0
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalizations:0
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_input_center:0
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:0
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.lookup_conversions:0
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation:0
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation_names:0
#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader._read_extent:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.get_dtypes:0
#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.get_vtk_type:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:0
#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:0
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:0
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.need_to_read:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.need_to_read:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase._read_extent:0
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.ubc_model_3d:0
#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:0
msgid "Return type"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:19
msgid "copy_arrays_to_point_data"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:1
msgid "Copys arrays from an input to an ouput's point data."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:3
msgid "The input data object to copy from"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:5
msgid "The output data object to copy over to"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.copy_arrays_to_point_data:10
msgid "returns the output data object parameter"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:26
msgid "get_all_array_names"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:33
msgid "get_numpy_array"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:1
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:1
msgid "Grabs an array from vtkDataObject given its name and field association."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:3
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:5
msgid "the input data object wrapped using vtk dataset adapter"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:8
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:8
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:7
msgid "the name of the input array for the given index"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_numpy_array:11
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:11
msgid "a wrapped ``vtkDataArray`` for NumPy"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:40
msgid "get_selected_array"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:1
msgid "Gets selectected array at index idx wrapped for NumPy"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:3
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:3
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:3
msgid "A vtkAlgorithm class instantiation"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array:8
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:5
#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:5
msgid "the input array index"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:47
msgid "get_selected_array_field"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:1
msgid "Gets the field of the input array for a given index on a VTK algorithm"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_field:8
msgid "the field type of the input array for the given index"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:54
msgid "get_selected_array_name"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_selected_array_name:1
msgid "Gets the name of the input array for a given index on a VTK algorithm"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:61
msgid "get_vtk_array"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:3
msgid "the input data object"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/arrays.py:docstring of PVGeo._helpers.arrays.get_vtk_array:10
msgid "the array from input field and name"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/arrays.rst:68
msgid "search_for_array"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/errors.rst:4
msgid "errors"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/errors.rst:12
msgid "ErrorObserver"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver:1
#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.HiddenPrints:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool:1
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver:1
msgid "A class for catching errors when processing on a VTK pipeline. The ``AlgorithmBase`` class handles setting up this observer on initialization."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver:5
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:17
#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.getVTKjsURL:18
#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.setAxisLabelsFromBounds:11
msgid "Example"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver.error_occurred:1
msgid "Ask self if an error has occured"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver.get_error_message:1
msgid "Get the last set error message"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver.get_error_message:3
msgid "the last set error message"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.ErrorObserver.make_observer:1
msgid "Make this an observer of an algorithm"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/errors.rst:23
msgid "HiddenPrints"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.HiddenPrints:1
msgid "Use this object to hide print statements when perfroming a task. This is used to suppress printed warnings from discretize on import:"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.HiddenPrints:4
msgid "Example: >>> with HiddenPrints(): ...     import discretize"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/errors.rst:34
msgid "PVGeoError"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.PVGeoError:1
msgid "Bases: :class:`Exception`"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/errors.py:docstring of PVGeo._helpers.errors.PVGeoError:1
msgid "This is a custom error class for handling errors when proccessing on the VTK pipeline. It makes the error messages easy to decipher in ParaView and cleans the messages when used in Python outside of ParaView. When on the VTK pipeline, errors aren't really raised but passed over and printed to the console. This class makes decipher the error streams a whole lot easier for human eyes."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/index.rst:3
msgid "Internal Helpers"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/readers.rst:4
msgid "readers"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/readers.py:docstring of PVGeo._helpers.readers:1
msgid "These are helpers specifically for the file readers for private use only. @author: Bane Sullivan"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/readers.rst:12
msgid "clean_data_name"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/readers.py:docstring of PVGeo._helpers.readers.clean_data_name:1
msgid "A helper to clean a filename to make a useful data array name"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/readers.rst:19
msgid "create_modified_callback"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/timeseries.rst:4
msgid "timeseries"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/timeseries.rst:12
msgid "_calculate_time_range"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries._calculate_time_range:1
msgid "Discretizes time range accoridng to step size ``dt`` in seconds"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/timeseries.rst:19
msgid "get_combined_input_time_steps"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_combined_input_time_steps:1
msgid "This will iterate over all input ports and combine their unique timesteps for an output algorithm to have."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_combined_input_time_steps:4
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:3
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:4
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:3
msgid "The data object (Proxy) on the pipeline (pass `self` from algorithm subclasses)"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_combined_input_time_steps:8
msgid "a 1D array of all the unique timestep values (empty array if no time variance)"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/timeseries.rst:26
msgid "get_input_time_steps"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:1
msgid "Get the timestep values for the algorithm's input"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:6
msgid "the input port"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:8
msgid "optional : the connection index on the input port"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_input_time_steps:11
msgid "the time step values of the input (if there arn't any, returns ``None``)"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/timeseries.rst:33
msgid "get_requested_time"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:1
#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:1
msgid "Handles setting up the timesteps on on the pipeline for a file series reader."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:7
msgid "The output information for the algorithm"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:10
msgid "the index for the output port"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.get_requested_time:13
msgid "the index of the requested time"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/timeseries.rst:40
msgid "update_time_steps"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:6
msgid "Number of timesteps (Pass a list to use length of that list)"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:9
msgid "The discrete value in seconds for the time step."
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:11
msgid "if true, this will treat the nt argument as the exact timestep values to use"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/timeseries.py:docstring of PVGeo._helpers.timeseries.update_time_steps:15
msgid "Returns the timesteps as an array"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:4
msgid "xml"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:12
msgid "_help_arrays_xml"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml._help_arrays_xml:1
msgid "Internal helper"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:19
msgid "get_drop_down_xml"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_drop_down_xml:1
msgid "Get the XML content for a drop down menu when making a ParaView plugin."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:26
msgid "get_file_reader_xml"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_file_reader_xml:1
msgid "Get the XML for a selectectable file for a reader when building a ParaView plugin"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_file_reader_xml:5
msgid "Thanks: `Daan van Vugt`_ and for `his work here`_"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_file_reader_xml:6
msgid "Modified by `Bane Sullivan`_"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:33
msgid "get_input_array_xml"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_input_array_xml:1
msgid "Get the XML content for an array selection drop down menu."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:40
msgid "get_property_xml"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_property_xml:1
msgid "Get the XML content for a property of a parameter for a python data object when making a ParaView plugin."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:47
msgid "get_python_path_property"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_python_path_property:1
msgid "Get the XML content for setting the Python path when making a ParaView plugin."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:54
msgid "get_reader_time_step_values"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_reader_time_step_values:1
msgid "Get the XML content for reader time step values the Python path when making a ParaView plugin."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/_helpers/xml.rst:61
msgid "get_vtk_type_map"
msgstr ""

#: ../../PVGeo/PVGeo/_helpers/xml.py:docstring of PVGeo._helpers.xml.get_vtk_type_map:1
msgid "Get the the VTK Type Map as specified in ``vtkType.h``"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:4
#: ../../PVGeo/docs/source/content/PVGeo/ubc/two_file_base.rst:4
msgid "Base Classes"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:12
msgid "Algorithm Base"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase:1
msgid "Bases: :class:`vtk.util.vtkAlgorithm.VTKPythonAlgorithmBase`"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase:1
msgid "This is a base class to add convienace methods to the ``VTKPythonAlgorithmBase`` for all algorithms implemented in ``PVGeo``. We implement our algorithms in this manner to harness all of the backend support that the ``VTKPythonAlgorithmBase`` class provides for integrating custom algorithms on a VTK pipeline. All of the pipeline methods for setting inputs, getting outputs, making requests are handled by the super classes. For more information on what functionality is available, check out the VTK Docs for the `vtkAlgorithm`_ and then check out the following blog posts:"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase:10
msgid "`vtkPythonAlgorithm is great`_"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase:11
msgid "A VTK pipeline primer `(part 1)`_, `(part 2)`_, and `(part 3)`_"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase:12
msgid "`ParaView Python Docs`_"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.GetOutput:1
msgid "A conveience method to get the output data object of this ``PVGeo`` algorithm."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.apply:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:1
msgid "Update the algorithm and get the output data object"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.error_occurred:1
msgid "A conveience method for handling errors on the VTK pipeline"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.error_occurred:3
msgid "true if an error has ovvured since last checked"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.get_error_message:1
msgid "A conveience method to print the error message."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.get_output:1
msgid "Alias for self.GetOutput()"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.AlgorithmBase.update:1
msgid "Alias for self.Update()"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:23
msgid "Filter Base"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.FilterBase:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase:1
#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource:1
#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.OutlineContinents:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase:1
msgid "Bases: :class:`PVGeo.base.AlgorithmBase`"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.FilterBase:1
msgid "A base class for implementing filters which holds several convienace methods"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.FilterBase.apply:1
msgid "Run this algorithm on the given input dataset"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:34
msgid "Filter Preserve Type Base"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.FilterPreserveTypeBase:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.CombineTables:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray:1
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ExtractCellCenters:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ExtractPoints:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotatePoints:1
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin:1
msgid "Bases: :class:`PVGeo.base.FilterBase`"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.FilterPreserveTypeBase:1
msgid "A Base class for implementing filters that preserve the data type of their arbitrary input."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.FilterPreserveTypeBase.RequestDataObject:1
msgid "There is no need to overwrite this. This method lets the pipeline know that the algorithm will dynamically decide the output data type based in the input data type."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:45
msgid "Interfaced Base Reader"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:1
#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader:1
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader:1
msgid "Bases: :class:`PVGeo.base.ReaderBase`"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader:1
msgid "A general base reader for all interfacing with librarues that already have file I/O methods and VTK data object interfaces. This provides a routine for using an external library to handle all I/O and produce the VTK data objects."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader.RequestData:1
msgid "Do not override. Used by pipeline to get data for current timestep and populate the output data object."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader.RequestDataObject:1
msgid "Do not override. This method lets the us dynamically decide the output data type based in the read meshes. Note: they all have to be the same VTK type."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader.RequestInformation:1
msgid "Do not override. Used by pipeline to set extents and time info."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader._get_object_at_index:1
msgid "Internal helper to get the data object at the specified index"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader._get_vtk_object:1
msgid "OVERRIDE: Given an object in the interfaced library's type, return a converted VTK data object."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader._read_file:1
msgid "OVERRIDE: Reads from the the libraries format and returns an object in the given library's format."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.InterfacedBaseReader._read_up_front:1
msgid "Do not override. A predifiened routine for reading the files up front."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:56
msgid "Reader Base: Time Varying"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBase:1
#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader:1
msgid "Bases: :class:`PVGeo.base.ReaderBaseBase`"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBase:1
msgid "A base class for inherrited functionality common to all reader algorithms that need to handle a time series."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBase.RequestInformation:1
msgid "This is a conveience method that should be overwritten when needed. This will handle setting the timesteps appropriately based on the number of file names when the pipeline needs to know the time information."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBase._update_time_steps:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData._update_time_steps:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid._update_time_steps:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase._update_time_steps:1
msgid "For internal use only: appropriately sets the timesteps."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBase.get_time_step_values:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.get_time_step_values:1
msgid "Use this in ParaView decorator to register timesteps on the pipeline."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBase.set_time_delta:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_time_delta:1
msgid "An advanced property to set the time step in seconds."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:67
msgid "Reader Base Base"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase:1
msgid "A base class for inherrited functionality common to all reader algorithms"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.AddFileName:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.add_file_name:1
msgid "Use to set the file names for the reader. Handles singlt string or list of strings."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.AddFileName:4
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.add_file_name:4
msgid "The absolute file name with path to read."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.Modified:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.Modified:1
msgid "Call modified if the files needs to be read again again"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.apply:1
msgid "Given a file name (or list of file names), perfrom the read"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.clear_file_names:1
msgid "Use to clear file names of the reader."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.clear_file_names:5
msgid "This does not set the reader to need to read again as there are no files to read."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.get_file_names:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.get_model_filenames:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.get_model_filenames:1
msgid "Returns the list of file names or given and index returns a specified timestep's filename."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.need_to_read:1
msgid "Ask self if the reader needs to read the files again."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.need_to_read:3
msgid "Set the read status"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.ReaderBaseBase.need_to_read:6
msgid "the status of the reader."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:78
msgid "Two File Reader Base"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase:1
msgid "A base clase for readers that need to handle two input files. One meta-data file and a series of data files."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.Modified:3
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.need_to_readMesh:3
msgid "set the status of the reader for mesh files."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.Modified:5
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.need_to_readModels:3
msgid "set the status of the reader for model files."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.RequestInformation:1
msgid "Used by pipeline to handle setting up time variance"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.__update_time_steps:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime._update_time_steps:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints._update_time_steps:1
msgid "For internal use only"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.add_model_file_name:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.add_model_file_name:1
msgid "Use to set the file names for the reader. Handles single string or list of strings."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.add_model_file_name:4
msgid "the file name(s) to use for the model data."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.apply:1
msgid "Perfrom the read with parameters/file names set during init or by setters"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.clear_mesh:1
msgid "Use to clear mesh file name"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.clear_models:1
msgid "Use to clear data file names"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.get_mesh_filename:1
msgid "Get the mesh filename"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.get_time_step_values:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime.get_time_step_values:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.get_time_step_values:1
msgid "Use this in ParaView decorator to register timesteps"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.has_models:1
msgid "A convienance method to see if a list contatins models filenames."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.need_to_readMesh:1
msgid "Ask self if the reader needs to read the mesh file again."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.need_to_readModels:1
msgid "Ask self if the reader needs to read the model files again."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.set_mesh_filename:1
msgid "Set the mesh file name."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.set_time_delta:1
msgid "An advanced property for the time step in seconds."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.TwoFileReaderBase.this_has_models:1
msgid "Ask self if the reader has model filenames set."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/base.rst:89
msgid "Writer Base"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.FillInputPortInformation:1
msgid "Allows us to save composite datasets as well."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.FillInputPortInformation:3
msgid "I only care about ``vtkMultiBlockDataSet``"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.RequestData:1
msgid "Subclasses must implement a ``perform_write_out`` method that takes an input data object and a filename. This method will automatically handle composite data sets."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.SetFileName:1
#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.set_file_name:1
msgid "Specify the filename for the output. Writer can only handle a single output data object/time step."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.Write:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.Write:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.write:1
msgid "Perfrom the write out."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.apply:1
msgid "Run this writer algorithm on the given input data object"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.get_block_filename:1
msgid "Get filename for component of a multi block dataset"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.get_file_name:1
msgid "Get the set filename."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.get_format:1
msgid "Get the ASCII format used for floats"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.perform_write_out:1
msgid "This method must be implemented. This is automatically called by ``RequestData`` for single inputs or composite inputs."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.set_block_filenames:1
msgid "Gets a list of filenames based on user input filename and creates a numbered list of filenames for the reader to save out. Assumes the filename has an extension set already."
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.set_format:1
msgid "Use to set the ASCII format for the writer default is ``'%.9e'``"
msgstr ""

#: ../../PVGeo/PVGeo/base.py:docstring of PVGeo.base.WriterBase.use_composite:1
msgid "True if input dataset is a composite dataset"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/cmaps.rst:4
msgid "Color Maps"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/cmaps.rst:12
msgid "get_parula_map"
msgstr ""

#: ../../PVGeo/PVGeo/cmaps.py:docstring of PVGeo.cmaps.get_parula_map:1
msgid "A convienance method for getting a matplotlib friendly version of MATLAB's parula colormap."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/index.rst:3
msgid "General Filters"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/math.rst:4
msgid "Math Operations"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/math.rst:12
msgid "Array Math"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AppendCellCenters:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper:1
msgid "Bases: :class:`PVGeo.base.FilterPreserveTypeBase`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:1
msgid "This filter allows the user to select two input data arrays on which to perfrom math operations. The input arrays are used in their order of selection for the operations."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:5
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:7
msgid "a static shifter/scale factor across the array after normalization."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:8
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:10
msgid "The new array's string name"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:10
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_normalization:3
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:7
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_operation:3
msgid "The operation as a string key, int index, or callable method"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:14
msgid "**Available Math Operations:**"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:16
msgid "`add`: This adds the two data arrays together"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:17
msgid "`subtract`: This subtracts input array 2 from input array 1"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:18
msgid "`multiply`: Multiplies the two data arrays together"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:19
msgid "`divide`: Divide input array 1 by input array 2 (arr1/arr2)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath:20
msgid "`correlate`: Use `np.correlate(arr1, arr2, mode='same')`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.RequestData:1
msgid "Used by pipeline to perfrom operation and generate output"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:1
msgid "Used to set the input array(s)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:3
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:3
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:3
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:3
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:3
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:3
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:4
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:3
msgid "the index of the array to process"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:5
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:5
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:5
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:5
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:5
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:5
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:6
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:5
msgid "input port (use 0 if unsure)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:7
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:7
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:7
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:7
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:7
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:7
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:8
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:7
msgid "the connection on the port (use 0 if unsure)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:9
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:9
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:9
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:9
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:9
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:9
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:10
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:9
msgid "the array field (0 for points, 1 for cells, 2 for field, and 6 for row)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.SetInputArrayToProcess:12
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.SetInputArrayToProcess:12
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.SetInputArrayToProcess:12
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.SetInputArrayToProcess:12
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.SetInputArrayToProcess:12
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.SetInputArrayToProcess:12
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:13
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetInputArrayToProcess:12
msgid "the name of the array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._add:1
msgid "Adds two input NumPy arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._correlate:1
msgid "Use ``np.correlate()`` on ``mode='same'`` on two selected arrays from one input."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._divide:1
msgid "Divides two input NumPy arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._math_up:1
msgid "Make sure to pass array names and integer associated fields. Use helpers to get these properties."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._multiply:1
msgid "Mutlipies two input NumPy arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._set_input_array_1:1
msgid "Set 1st input array by name and field"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._set_input_array_2:1
msgid "Set 2nd input array by name and field"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath._subtract:1
msgid "Subtracts two input NumPy arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.apply:1
msgid "Run the algorith on an input data object, specifying array names"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_multiplier:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_multiplier:1
msgid "Return the set multiplier/scalar"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_new_array_name:1
msgid "Get the name used for the new array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation:1
msgid "Gets a math operation based on an index in the keys"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation:3
msgid "the math operation method"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation_names:1
msgid "Gets a list of the math operation keys"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operation_names:3
msgid "the keys for getting the math operations"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.get_operations:1
msgid "Returns the math operation methods as callable objects in a dictionary"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.set_multiplier:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_multiplier:1
msgid "This is a static shifter/scale factor across the array after normalization."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.set_new_array_name:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_new_array_name:1
msgid "Give the new array a meaningful name."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.set_operation:1
msgid "Set the math operation to perform"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.set_operation:3
msgid "The operation as a string key, int"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArrayMath.set_operation:9
msgid "This can accept a callable method to set a custom operation as long as its signature is: ``<callable>(arr1, arr2)``"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/math.rst:23
msgid "Arrays To RGBA"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA:1
msgid "Use arrays from input data object to set an RGBA array. Sets colors and transparencies."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.RequestData:1
msgid "Execute on pipeline"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA._get_arrays:1
msgid "Internal helper to fetch RGBA arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA._mask_arrays:1
msgid "Internal helper to mask RGBA arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA._set_input_array_blue:1
msgid "Set field and name of blue array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA._set_input_array_green:1
msgid "Set field and name of green array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA._set_input_array_red:1
msgid "Set field and name of red array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA._set_input_array_trans:1
msgid "Set field and name of transparency array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.apply:1
msgid "Run the algorithm on an input data object, specifying RGBA array names"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.set_mask_value:1
msgid "Set the value to mask in the RGBA arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.ArraysToRGBA.set_use_transparency:1
msgid "Set a boolean flag on whether or not to use a transparency component"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/math.rst:34
msgid "Normalize Array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:1
msgid "This filter allows the user to select an array from the input data set to be normalized. The filter will append another array to that data set for the output. The user can specify how they want to rename the array, can choose a multiplier, and can choose from several types of common normalizations (more functionality added as requested)."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:14
msgid "The operation as a string key, integer index, or callable method"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:18
msgid "**Normalization Types:**"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:20
msgid "`feature_scale`: Feature Scale"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:21
msgid "`standard_score`: tandard Score"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:22
msgid "`log10`: Natural Log"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:23
msgid "`natural_log`: Log Base 10"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray:24
msgid "`just_multiply`: Only Multiply by Multiplier"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.RequestData:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.RequestData:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints.RequestData:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime.RequestData:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints.RequestData:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.RequestData:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.CombineTables.RequestData:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.RequestData:1
#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.RequestData:1
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AppendCellCenters.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ExtractCellCenters.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ExtractPoints.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.RequestData:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM.RequestData:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.RequestData:1
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.RequestData:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.RequestData:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.RequestData:1
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.RequestData:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.RequestData:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.RequestData:1
msgid "Used by pipeline to generate output"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray._feature_scale:1
msgid "Returns feature scale normalization of input array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray._log10:1
msgid "Returns log base 10 of input array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray._log_nat:1
msgid "Returns natural logarithm of input array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray._normalize:1
msgid "Perform normalize on a data array for any given VTK data object."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray._pass_array:1
msgid "Cast an input array as a NumPy array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray._standard_score:1
msgid "Returns tandard score normalization of input array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.apply:1
#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.apply:1
msgid "Run the algorithm on an input data object, specifying the array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_array_range:1
msgid "Returns a tuple of the range for a ``vtkDataArray`` on a ``vtkDataObject``."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_new_array_name:1
msgid "Get the name of the new array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization:1
msgid "Gets a normalization based on an index in the keys"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization:3
msgid "the normalization method"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization_names:1
msgid "Gets a list of the normalization keys"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalization_names:3
msgid "the keys for getting the normalizations"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalizations:1
msgid "All Available normalizations"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.get_normalizations:3
msgid "dictionary of callable methods for normalizing an array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_normalization:1
msgid "Set the normalization operation to perform"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_normalization:9
msgid "This can accept a callable method to set a custom operation as long as its signature is: ``<callable>(arr)``"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_shift:1
msgid "Set a static shifter to the input data array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.NormalizeArray.set_take_absolute_value:1
msgid "This will take the absolute value of the array before normalization."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/math.rst:45
msgid "Percent Threshold"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold:1
msgid "Allows user to select a percent of the data range to threshold. This will find the data range of the selected input array and remove the bottom percent. This can be reversed using the invert property."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.RequestData:1
msgid "Used by pipeline for execution"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.set_invert:1
msgid "Use to invert the threshold filter"
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.set_percent:1
msgid "Set the percent for the threshold in range (0, 100). Any values falling beneath the set percent of the total data range will be removed."
msgstr ""

#: ../../PVGeo/PVGeo/filters/math.py:docstring of PVGeo.filters.math.PercentThreshold.set_use_continuous_cell_range:1
msgid "If this is on (default is off), we will use the continuous interval [minimum cell scalar, maxmimum cell scalar] to intersect the threshold bound , rather than the set of discrete scalar values from the vertices"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/slicing.rst:4
msgid "Slicing"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/slicing.rst:12
msgid "Many Slices Along Axis"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints:1
msgid "Bases: :class:`PVGeo.filters.slicing._SliceBase`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis:1
msgid "Slices a ``vtkDataSet`` along a given axis many times. This produces a specified number of slices at once each with a normal vector oriented along the axis of choice and spaced uniformly through the range of the dataset on the chosen axis."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis:6
msgid "Padding as a percentage (0.0, 1.0)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis._get_origin:1
msgid "Internal helper to get plane origin"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis._set_axial_range:1
msgid "Internal helper to set the slicing range along the set axis"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_axis:1
msgid "Get the set axis to slice upon as int index (0,1,2)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_input_bounds:1
msgid "Gets the bounds of the input data set on the set slicing axis."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_input_center:1
msgid "Gets the center of the input data set"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_input_center:3
msgid "the XYZ coordinates of the center of the data set."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_normal:1
msgid "Get the normal of the slicing plane"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.get_range:1
msgid "Get the slicing range for the set axis"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.set_axis:1
msgid "Set the axis on which to slice"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.set_axis:3
msgid "the axial index (0, 1, 2) = (x, y, z)"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongAxis.set_padding:1
msgid "Set the percent padding for the slices on the edges"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/slicing.rst:23
msgid "Many Slices Along Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints:1
msgid "Takes a series of points and a data source to be sliced. The points are used to construct a path through the data source and a slice is added at intervals of that path along the vector of that path at that point. This constructs many slices through the input dataset as a merged ``vtkMultiBlockDataSet``."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints:9
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints:9
msgid "Make sure the input data source is slice-able."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints:10
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints:10
msgid "The SciPy module is required for this filter."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints.FillInputPortInformation:1
#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.FillInputPortInformation:1
msgid "This simply makes sure the user selects the correct inputs"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints._get_planes:1
msgid "Internal helper to generate planes for the slices"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints._get_slice:1
#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints._get_slice:1
msgid "Internal helper to perfrom the filter"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints.apply:1
msgid "Run the algorithm along some points for the given input data"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.ManySlicesAlongPoints.set_use_nearest_nbr:1
msgid "Set a flag on whether to use SciPy's nearest neighbor approximation when generating the slicing path"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/slicing.rst:34
msgid "Slice Through Time"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime:1
msgid "Bases: :class:`PVGeo.filters.slicing.ManySlicesAlongAxis`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime:1
msgid "Takes a sliceable ``vtkDataSet`` and progresses a slice of it along a given axis. The macro requires that the clip already exist in the pipeline. This is especially useful if you have many clips linked together as all will move through the seen as a result of this macro."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime.RequestInformation:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.RequestInformation:1
msgid "Used by pipeline to set the time information"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime.set_number_of_slices:1
msgid "Set the number of slices/timesteps to generate"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SliceThroughTime.set_time_delta:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.set_time_delta:1
msgid "Set the time step interval in seconds"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/slicing.rst:45
msgid "Slide Slice Along Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints:1
msgid "Bases: :class:`PVGeo.filters.slicing.ManySlicesAlongPoints`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints:1
msgid "Takes a series of points and a data source to be sliced. The points are used to construct a path through the data source and a slice is added at specified locations along that path along the vector of that path at that point. This constructs one slice through the input dataset which the user can translate via a slider bar in ParaView."
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints.RequestInformation:1
msgid "Used by pipeline to prepare output"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints.get_location:1
msgid "Return the current location along the input line for the slice"
msgstr ""

#: ../../PVGeo/PVGeo/filters/slicing.py:docstring of PVGeo.filters.slicing.SlideSliceAlongPoints.set_location:1
msgid "Set the location along the input line for the slice location as a percent (0, 99)."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/tables.rst:4
msgid "Table Operations"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/tables.rst:12
msgid "Append Table to Cell Data"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData:1
msgid "Takes two inputs, a dataset to preserve and a table of data, where the data in the table is appended to the CellData of the input dataset. The 0th port is the dataset to preserve and the 1st port is a table whos rows will be appended as CellData to the 0th port. The number of rows in the table MUST match the number of cells in the input dataset."
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.RequestInformation:1
msgid "Used by pipeline to handle time variance"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:3
msgid "Any dataset with CellData"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:5
msgid "table of data values that will be appended to ``dataset``'s CellData"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.apply:9
msgid "The appended dataset as a new object"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.AppendTableToCellData.get_time_step_values:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.get_time_step_values:1
msgid "Use this in ParaView decorator to register timesteps."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/tables.rst:23
msgid "Combine Tables"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.CombineTables:1
msgid "Takes two tables and combines them if they have the same number of rows. Currently this cannot handle time varing tables as that gets complicated real quick if the tables do not have the same timestep values"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.CombineTables.FillInputPortInformation:1
msgid "Used by pipeline. Necessary when dealing with multiple input ports"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.CombineTables.apply:1
msgid "Run the algorithm on the two input tables"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/tables.rst:34
msgid "Extract Array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray:1
msgid "Extract an array from a ``vtkDataSet`` and make a ``vtkTable`` of it."
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ExtractArray.apply:1
msgid "Run the algorithm on the input data object, specifying the array name to extract."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/tables.rst:45
msgid "Reshape Table"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable:1
msgid "This filter will take a ``vtkTable`` object and reshape it. This filter essentially treats ``vtkTable``s as 2D matrices and reshapes them using ``numpy.reshape`` in a C contiguous manner. Unfortunately, data fields will be renamed arbitrarily because VTK data arrays require a name."
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.RequestData:1
msgid "Used by pipeline"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable._reshape:1
msgid "Internal helper to perfrom the reshape"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.add_name:1
msgid "Use to append a name to the list of data array names for the output table."
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.get_names:1
msgid "Returns a list of the names given to the new arrays"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.set_names:1
msgid "Set names using a semicolon (;) seperated string or a list of strings"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.set_names:3
msgid "a string of data array names for the reshaped table using a semicolon (;) to spearate"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.set_number_of_columns:1
msgid "Set the number of columns for the output ``vtkTable``"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.set_number_of_rows:1
msgid "Set the number of rows for the output ``vtkTable``"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.ReshapeTable.set_order:1
msgid "Set the reshape order (``'C'`` of ``'F'``)"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/tables.rst:56
msgid "Split Table On Array"
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray:1
msgid "A filter to seperate table data based on the unique values of a given data array into a ``vtkMultiBlockDataSet``."
msgstr ""

#: ../../PVGeo/PVGeo/filters/tables.py:docstring of PVGeo.filters.tables.SplitTableOnArray.apply:1
msgid "Run the algorithm on the input data object, specifying the array name to use for the split."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/voxelize.rst:4
msgid "Voxelize"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize:1
msgid "This module provides a complicated algorithm for making voxels out of regularly gridded points. Considering that this algorithm is rather complex, we are keeping it in its own module until we can simplify it, clean up the code, and make it capable of handling non-uniformly gridded points"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/voxelize.rst:12
msgid "Voxelize Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints:1
msgid "This makes a ``vtkUnstructuredGrid`` of scattered points given voxel sizes as input arrays. This assumes that the data is at least 2-Dimensional on the XY Plane."
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints._copy_arrays:1
msgid "internal helper to copy arrays from point data to cell data in the voxels."
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.add_cell_data:1
msgid "Add a NumPy array as cell data to the given grid input"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.add_field_data:1
msgid "An internal helper to add the recovered information as field data"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.estimate_uniform_spacing:1
msgid "This assumes that the input points make up some sort of uniformly spaced grid on at least an XY plane."
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.get_angle:1
msgid "Returns the recovered angle if set to recover the input grid. If the input points are rotated, then this angle will reflect a close approximation of that rotation."
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.get_angle:5
msgid "A flag on to return decimal degrees or radians."
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.get_recovered_angle:1
msgid "DEPRECATED: use `get_angle`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.get_spacing:1
msgid "Get the cell spacings"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.points_to_grid:1
msgid "Convert XYZ points to a ``vtkUnstructuredGrid``."
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_angle:1
msgid "Set the rotation angle manually"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_x:1
msgid "Set the X cells spacing"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_x:3
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_deltas:3
msgid "the spacing(s) for the cells in the X-direction"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_y:1
msgid "Set the Y cells spacing"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_y:3
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_deltas:6
msgid "the spacing(s) for the cells in the Y-direction"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_z:1
msgid "Set the Z cells spacing"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_delta_z:3
#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_deltas:9
msgid "the spacing(s) for the cells in the Z-direction"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_deltas:1
msgid "Set the cell spacings for each axial direction"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_estimate_grid:1
msgid "Set a flag on whether or not to estimate the grid spacing/rotation"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_safe_size:1
msgid "A voxel size to use if a spacing cannot be determined for an axis"
msgstr ""

#: ../../PVGeo/PVGeo/filters/voxelize.py:docstring of PVGeo.filters.voxelize.VoxelizePoints.set_unique:1
msgid "Set a flag on whether or not to try to elimate non unique elements"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:4
msgid "Point/Line Sets"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:12
msgid "Add Cell Connectivity to Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints:1
msgid "This filter will add linear cell connectivity between scattered points. You have the option to add ``VTK_Line`` or ``VTK_PolyLine`` connectivity. ``VTK_Line`` connectivity makes a straight line between the points in order (either in the order by index or using a nearest neighbor calculation). The ``VTK_PolyLine`` adds a poly line connectivity between all points as one spline (either in the order by index or using a nearest neighbor calculation). Type map is specified in `vtkCellType.h`."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints:9
msgid "**Cell Connectivity Types:**"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints:11
msgid "4: Poly Line"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints:12
msgid "3: Line"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints.RequestData:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.RequestData:1
msgid "Used by pipeline to generate output data object"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints._connect_cells:1
msgid "Internal helper to perfrom the connection"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints.set_cell_type:1
msgid "Set the cell typ by the integer id as specified in `vtkCellType.h`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints.set_use_nearest_nbr:1
msgid "Set a flag on whether to a KDTree nearest neighbor algorithm to sort the points to before adding linear connectivity."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.AddCellConnToPoints.set_use_unique_points:1
msgid "Set a flag on whether to only use unique points"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:23
msgid "Append Cell Centers"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:34
msgid "Build Surface From Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints:1
msgid "From the sorted x, y, and z station locations in the input PolyData, create a surface to project down from the line of those points. Use the Z cells to control the size of the mesh surface"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:1
msgid "From the sorted x, y, and z station locations, create a surface to display a seismic recording/migration on in space. The result is defined in the X,Y,Z-z_range 3D space."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:5
msgid "The z_range should be treated as relative coordinates to the values given on the third column of the points array. If you want the values in the z_range to be treated as the absolute coordinates, simply do not pass any Z values in the points array - if points is N by 2, then the values in z_range will be inferred as absolute."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:11
msgid "array-like of the station x and y locations"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:13
msgid "The linear space of the z"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.create_surface:17
msgid "pyvista.UnstructuredGrid"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.set_z_coords:1
#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.set_z_coords_str:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_z_cells:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_z_cells_str:1
msgid "Set the spacings for the cells in the Z direction"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.set_z_coords:3
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_z_cells:3
msgid "the spacings along the Z-axis"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.BuildSurfaceFromPoints.set_z_coords_str:3
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_z_cells_str:3
msgid "the spacings along the Z-axis in the UBC style"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:45
msgid "Convert XYZ Units"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits:1
msgid "Convert points in an input data object to from meters to feet or vice versa. This simply uses a ``vtkTransformFilter`` and scales input data object with common conversions."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.get_conversion:1
msgid "Get the conversion value"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.lookup_conversions:1
msgid "All Available conversions"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.lookup_conversions:3
msgid "dictionary of conversion units"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ConvertUnits.set_conversion:1
msgid "Set the conversion via a lookup table"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:56
msgid "Extract Cell Centers"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:67
msgid "Extract Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.ExtractPoints:1
msgid "Extracts XYZ coordinates and point/cell data from an input ``vtkDataSet``"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:78
msgid "Iterate Over Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints:1
msgid "Iterate over points in a time varying manner."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.get_normal:1
msgid "Get the current normal vector"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.get_point:1
msgid "Get the current point"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.IterateOverPoints.set_decimate:1
msgid "Set the percent (1 to 100) to decimate"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:89
msgid "Lat Lon To UTM"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM:1
msgid "Converts Points from Lon Lat to UTM"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM.__convert_2d:1
msgid "Converts 2D Lon Lat coords to 2D XY UTM points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM.get_available_ellps:1
msgid "Returns the available ellps"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM.set_ellps:1
msgid "Set the ellipsoid type"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.LonLatToUTM.set_zone:1
msgid "Set the UTM zone number"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:100
msgid "Points to Tube"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.PointsToTube:1
msgid "Bases: :class:`PVGeo.filters.xyz.AddCellConnToPoints`"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.PointsToTube:1
msgid "Takes points from a vtkPolyData object and constructs a line of those points then builds a polygonal tube around that line with some specified radius and number of sides."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.PointsToTube._connect_cells:1
msgid "This uses the parent's ``_connect_cells()`` to build a tub around"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.PointsToTube.set_capping:1
msgid "Set a boolean flag on whether or not to cap the ends of the tube"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.PointsToTube.set_number_of_sides:1
msgid "Set the number of sides (resolution) for the tube"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.PointsToTube.set_radius:1
msgid "Set the radius of the tube"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:111
msgid "Rotate Points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotatePoints:1
msgid "Rotates XYZ coordinates in `vtkPolyData` around an origin at a given angle on the XY plane."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotatePoints.RequestData:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii.RequestData:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.RequestData:1
msgid "Used by pipeline to generate output."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotatePoints.set_origin:1
msgid "Sets the origin to perform the rotate around."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotatePoints.set_rotation_degrees:1
msgid "Sets the rotational angle in degrees."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotatePoints.set_use_corner:1
msgid "A flag to use a corner of the input data set as the rotational origin."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/filters/xyz.rst:122
msgid "Rotation Tool"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool:1
msgid "A class that holds a set of methods/tools for performing and estimating coordinate rotations."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool._converge_angle:1
msgid "Internal use only: pts should only be a two neighboring points."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool._estimate_angle_and_spacing:1
msgid "internal use only"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool._get_rotation_matrix:1
msgid "Internal helper to generate a rotation matrix given a rotation angle"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.cos_between:1
msgid "Gets the cosine between two points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.distance_between:1
msgid "Gets the distance between two points"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.estimate_and_rotate:1
msgid "A method to estimate the rotation of a set of points and correct that rotation on the XY plane"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotate:1
msgid "Rotate points around (0,0,0) given an anlge on the XY plane"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotate_around:1
msgid "Rotate points around an origins given an anlge on the XY plane"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotation_matrix:1
msgid "Calculate the rotation matrix required to rotate from one vector to another. For the rotation of one vector to another, there are an infinit series of rotation matrices possible.  Due to axially symmetry, the rotation axis can be any vector lying in the symmetry plane between the two vectors.  Hence the axis-angle convention will be used to construct the matrix with the rotation axis defined as the cross product of the two vectors.  The rotation angle is the arccosine of the dot product of the two unit vectors. Given a unit vector parallel to the rotation axis, w = [x, y, z] and the rotation angle a, the rotation matrix R is::"
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotation_matrix:13
msgid "The unrotated vector defined in the reference frame."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotation_matrix:15
msgid "The rotated vector defined in the reference frame."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.rotation_matrix:18
msgid "This code was adopted from `printipi`_ under the MIT license."
msgstr ""

#: ../../PVGeo/PVGeo/filters/xyz.py:docstring of PVGeo.filters.xyz.RotationTool.sin_between:1
msgid "Calculate the sin angle between two points"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gmggroup/index.rst:2
msgid "A suite of algorithms designed for compatibilty with GMG Group projects such as the Open Mining Format specification."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gmggroup/index.rst:6
msgid "GMG Group Standards"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gmggroup/reader.rst:4
msgid "reader"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gmggroup/reader.rst:12
msgid "OMF Project Reader"
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader:1
msgid "Handles reading an OMF Project"
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader.GetDataSelection:1
msgid "Return the current user selection of data elements"
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader.Modified:1
#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader.modified:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.Modified:1
msgid "Ensure default is overridden to be false so array selector can call."
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader.RequestData:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader.RequestData:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader.RequestData:1
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedPointsReaderBase.RequestData:1
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.RequestData:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.MagObsReader.RequestData:1
msgid "Used by pipeline to get data for current timestep and populate the output data object."
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader._get_raw_data:1
msgid "Converts OMF data to VTK data objects."
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader._read_up_front:1
msgid "Internal functiona to read all data at the start"
msgstr ""

#: ../../PVGeo/PVGeo/gmggroup/reader.py:docstring of PVGeo.gmggroup.reader.OMFReader.get_file_name:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.get_file_name:1
msgid "Super class has file names as a list but we will only handle a single project file. This provides a conveinant way of making sure we only access that single file. A user could still access the list of file names using ``get_file_names()``."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/fileio.rst:4
msgid "File I/O"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio:1
msgid "This module contains general grid readers and writers for programs like Surfer."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/fileio.rst:12
msgid "Esri Grid Reader"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader:1
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedPointsReaderBase:1
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.XYZTextReader:1
msgid "Bases: :class:`PVGeo.readers.delimited.DelimitedTextReader`"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader:1
msgid "See details: https://en.wikipedia.org/wiki/Esri_grid"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader.RequestInformation:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.RequestInformation:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader.RequestInformation:1
#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader.RequestInformation:1
msgid "Used by pipeline to set grid extents."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader._extract_header:1
msgid "Internal helper to parse header information in ESRI Grid files"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader._file_contents_to_data_frame:1
msgid "Creates a dataframe with a sinlge array for the file data."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader._get_raw_data:1
msgid "This will return the proper data for the given timestep. This method handles Surfer's NaN data values and checkes the value range"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader.get_data_name:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader.get_data_name:1
msgid "Get the name of the data array"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader.get_shape:1
msgid "Get the shape of the grid."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.EsriGridReader.set_data_name:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader.set_data_name:1
msgid "Set the name of the data array"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/fileio.rst:23
msgid "Landsat XML Reader"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader:1
msgid "A reader that will handle ESPA XML files for Landsat Imagery. This reader uses the ``espatools`` package to read Landsat rasters (band sets) and creates vtkImageData with each band as point data"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.GetDataSelection:1
msgid "Used by ParaView GUI"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader._build_image_data:1
msgid "Properly builds the output ``vtkImageData`` object"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader._get_file_contents:1
msgid "Reads XML meta data, no data read."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader._get_raw_data:1
msgid "Perfroms the read for the selected bands"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader._read_up_front:1
#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeAppender._read_up_front:1
msgid "Internal helper to read all data at start"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.get_color_scheme_names:1
msgid "Get a list of the available color schemes"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.set_cast_data_type:1
msgid "A flag to cast all data arrays as floats/doubles. This will fill invalid values with nans instead of a fill value"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.LandsatReader.set_color_scheme:1
msgid "Get an RGB scheme from the raster set. If no scheme is desired, pass any string that is not a defined scheme as the scheme argument."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/fileio.rst:34
msgid "Surfer Grid Reader"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:1
msgid "Read 2D ASCII/Binary Surfer grid files. The IO code was adopted from `Seequent's steno3d_surfer`_"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:8
msgid "MIT License"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:10
msgid "Copyright (c) 2018 Seequent"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:12
msgid "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:19
msgid "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader:22
msgid "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader._read_grids:1
msgid "This parses the first file to determine grid file type then reads all files set."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader._read_up_front:1
#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._read_up_front:1
msgid "Should not need to be overridden."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader._surfer6ascii:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader._surfer6bin:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.SurferGridReader._surfer7bin:1
msgid "See class notes."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/fileio.rst:45
msgid "Write Cell Centers To CSV"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteCellCenterData:1
#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer:1
#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.WriteTableToGSLib:1
#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.WriteImageDataToSGeMS:1
msgid "Bases: :class:`PVGeo.base.WriterBase`"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteCellCenterData:1
msgid "This writer will save a file of the XYZ points for an input dataset's cell centers and its cell data. Use in tandom with ParaView's native CSV writer which saves the PointData."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteCellCenterData.perform_write_out:1
msgid "Writes the cell centers of the input data object to a file"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteCellCenterData.set_delimiter:1
msgid "The string delimiter to use"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/fileio.rst:56
msgid "Write ``vtkImageData`` to Surfer Format"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer:1
msgid "Write a 2D ``vtkImageData`` object to the Surfer grid format"
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.SetInputArrayToProcess:1
msgid "Used to the inpput array / the data value (z-value) to write for the Surfer format."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.apply:1
msgid "Run the algorithm on an input data object, specifying one data array to save out."
msgstr ""

#: ../../PVGeo/PVGeo/grids/fileio.py:docstring of PVGeo.grids.fileio.WriteImageDataToSurfer.perform_write_out:1
msgid "Writes an input ``vtkImageData`` object to a file"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/index.rst:3
msgid "Grid Tools"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/subset.rst:4
msgid "Subsetting"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/subset.rst:12
msgid "Extract Topography"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:1
msgid "This filter takes two inputs: any mesh dataset and a set of points for a topography source. This will add a boolean data array to the cell data of the input grid on whether that cell should be active (under topographic layer). A user can also choose to directly extract the data rather than appending a boolean scalar array via the ``remove`` argument."
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:10
msgid "buffer around the topography surface to include as part of the decision boundary"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:13
msgid "static value to shift the reference topography surface"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:15
msgid "optional to invert the extraction."
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:17
msgid "Optional parameter to apply a thresholding filter and return a ``vtkUnstructuredGrid`` object with only the extracted cells. The ``remove`` option is only available in Python environments (not available in ParaView). The ``remove`` flag must be set at the time of instantiation of this algorithm. This does not actually update the algorithm's output data object but applies a `PyVista` threshold filter to pass a new data object after calling ``apply``."
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography:29
msgid "This currenlty ignores time varying inputs. We can implement time variance but need to think about how we would like to do that. Should the topography surface be static and the volumetric data have time variance?"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.RequestDataObject:1
msgid "Constructs the output data object based on the input data object"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography._intersection:1
msgid "Extract cells intersecting the topography surface"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography._query:1
msgid "Querrys the data points for their closest point on the topography surface"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography._underneath:1
msgid "Extract cells underneath the topography surface"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.apply:1
msgid "Run the algorithm on the input data using the topography points"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation:1
msgid "Gets a extraction operation based on an index in the keys"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation:3
msgid "the operation method"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation_names:1
msgid "Gets a list of the extraction operation keys"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operation_names:3
msgid "the keys for getting the operations"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_operations:1
msgid "Returns the extraction operation methods as callable objects in a dictionary"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.get_tolerance:1
msgid "Get the tolerance threshold for the querry"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_invert:1
msgid "Sets the boolean flag on whether to invert the extraction."
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_offset:1
msgid "Sets how far off (in Z dir) to slice the data"
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_operation:1
msgid "Set the type of extraction to perform."
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_operation:9
msgid "This can accept a callable method to set a custom operation as long as its signature is ``<callable>(self, topo_points, data_points)`` and it strictly produces an integer array of zeros and ones."
msgstr ""

#: ../../PVGeo/PVGeo/grids/subset.py:docstring of PVGeo.grids.subset.ExtractTopography.set_tolerance:1
msgid "Set the tolerance threshold for the querry"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/transform.rst:4
msgid "Transform"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/transform.rst:12
msgid "Reverse Image Data Axii"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii:1
msgid "This filter will flip ``vtkImageData`` on any of the three cartesian axii. A checkbox is provided for each axis on which you may desire to flip the data."
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii._reverse_grid_axes:1
msgid "Internal helper to reverse data along specified axii"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii.set_flip_x:1
msgid "Set the filter to flip th input data along the X-axis"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii.set_flip_y:1
msgid "Set the filter to flip th input data along the Y-axis"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.ReverseImageDataAxii.set_flip_z:1
msgid "Set the filter to flip th input data along the Z-axis"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/transform.rst:23
msgid "Table To Time Grid"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid:1
msgid "A filter to convert a static (no time variance) table to a time varying grid. This effectively reashapes a table full of data arrays as a 4D array that is placed onto the CellData of a ``vtkImageData`` object."
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.Modified:1
#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.modified:1
msgid "Call modified if the filter needs to run again"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.RequestInformation:1
msgid "Used by pipeline to set whole output extent."
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid._build_image_data:1
msgid "Internal helper to consturct the output"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid._set_data:1
msgid "Internal helper to restructure the inpt table arrays"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_dimensions:1
msgid "Set the dimensions of the output grid"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_extent:1
msgid "Set the extent of the output grid"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_order:1
msgid "Set the reshape order (`'C'` or `'F'`)"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_origin:1
msgid "Set the origin of the output `vtkImageData`"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_spacing:1
msgid "Set the spacing for the points along each axial direction"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TableToTimeGrid.set_use_points:1
msgid "Set whether or not to place the data on the nodes/cells of the grid. True places data on nodes, false places data at cell centers (CellData). In ParaView, switching can be a bit buggy: be sure to turn the visibility of this data object OFF on the pipeline when changing between nodes/cells."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/grids/transform.rst:34
msgid "Translate Grid Origin"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin:1
msgid "This filter will translate the origin of `vtkImageData` to any specified Corner of the data set assuming it is currently in the South West Bottom Corner (will not work if Corner was moved prior)."
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin._translate:1
msgid "Internal helper to translate the inputs origin"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:1
msgid "Set the corner to use"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:3
msgid "corner location; see note."
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:8
msgid "1: South East Bottom"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:9
msgid "2: North West Bottom"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:10
msgid "3: North East Bottom"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:11
msgid "4: South West Top"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:12
msgid "5: South East Top"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:13
msgid "6: North West Top"
msgstr ""

#: ../../PVGeo/PVGeo/grids/transform.py:docstring of PVGeo.grids.transform.TranslateGridOrigin.set_corner:14
msgid "7: North East Top"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/gslib.rst:4
msgid "GSLib/GeoEAS File I/O"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/gslib.rst:12
msgid "GSLib Point Set Reader"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.GSLibPointSetReader:1
msgid "Bases: :class:`PVGeo.gslib.gslib._GSLibReaderMethods`, :class:`PVGeo.readers.delimited.DelimitedPointsReaderBase`"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.GSLibPointSetReader:1
msgid "Reads a GSLib point set file where the first three columns are the XYZ coordinates and the remainder of the data is consistent with the :class:`GSLibReader` specifications."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/gslib.rst:23
msgid "GSLib Table Reader"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.GSLibReader:1
msgid "Bases: :class:`PVGeo.gslib.gslib._GSLibReaderMethods`, :class:`PVGeo.readers.delimited.DelimitedTextReader`"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.GSLibReader:1
msgid "Reads a GSLIB file format to a ``vtkTable``. The GSLIB file format has headers lines followed by the data as a space delimited ASCI file (this filter is set up to allow you to choose any single character delimiter). The first header line is the title and will be printed to the console. This line may have the dimensions for a grid to be made of the data. The second line is the number (n) of columns of data. The next n lines are the variable names for the data in each column. You are allowed up to ten characters for the variable name. The data follow with a space between each field (column)."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/gslib.rst:34
msgid "Write ``vtkTable`` To GSLib Format"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.WriteTableToGSLib:1
msgid "Write the row data in a ``vtkTable`` to the GSLib Format"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.WriteTableToGSLib.perform_write_out:1
msgid "Write out the input data object to the GSLib file format"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/gslib.py:docstring of PVGeo.gslib.gslib.WriteTableToGSLib.set_header:1
msgid "Set the file header string"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/index.rst:3
msgid "GSLib & SGeMS"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/sgems.rst:4
msgid "SGeMS File I/O"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/sgems.rst:12
msgid "SGeMS Grid Reader"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader:1
msgid "Bases: :class:`PVGeo.gslib.gslib.GSLibReader`"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader:1
msgid "Generates ``vtkImageData`` from the uniform grid defined in the inout file in the SGeMS grid format. This format is simply the GSLIB format where the header line defines the dimensions of the uniform grid."
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader.RequestData:1
msgid "Used by pipeline to get output data object for given time step. Constructs the ``vtkImageData``"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader._extract_header:1
msgid "Internal helper to parse header info for the SGeMS file format"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader._read_extent:1
msgid "Reads the input file for the SGeMS format to get output extents. Computationally inexpensive method to discover whole output extent."
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader._read_extent:4
msgid "This returns a tuple of the whole extent for the uniform grid to be made of the input file (0,n1-1, 0,n2-1, 0,n3-1). This output should be directly passed to set the whole output extent."
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader.set_origin:1
msgid "Set the origin corner of the grid"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.SGeMSGridReader.set_spacing:1
msgid "Set the spacing for each axial direction"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/gslib/sgems.rst:23
msgid "Write ``vtkImageData`` To SGeMS Grid Format"
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.WriteImageDataToSGeMS:1
msgid "Writes a ``vtkImageData`` object to the SGeMS uniform grid format. This writer can only handle point data. Note that this will only handle CellData as that is convention with SGeMS."
msgstr ""

#: ../../PVGeo/PVGeo/gslib/sgems.py:docstring of PVGeo.gslib.sgems.WriteImageDataToSGeMS.perform_write_out:1
msgid "Write out the input ``vtkImage`` data to the SGeMS file format"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/index.rst:11
#: ../../PVGeo/docs/source/content/PVGeo/index.rst:11
msgid "PVGeo:"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/index.rst:2
msgid "About PVGeo"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/index.rst:4
#: ../../PVGeo/docs/source/content/pvmacros/index.rst:4
msgid "Author: Bane Sullivan"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/index.rst:5
#: ../../PVGeo/docs/source/content/pvmacros/index.rst:5
msgid "License: BSD-3-Clause"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/index.rst:6
#: ../../PVGeo/docs/source/content/pvmacros/index.rst:6
msgid "Copyright: 2018, Bane Sullivan"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/index.rst:7
#: ../../PVGeo/docs/source/content/pvmacros/index.rst:7
msgid "Version: 2.1.0"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:4
msgid "Interface"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface:1
msgid "The ``interface`` module provides functions to convert/cast between common VTK and NumPy/Pandas data types. These methods provide a simple to use interface for VTK data types so that users can make changes to VTK data strucutres via Python data structures that are a bit easier to perform numerical operations upon."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:12
msgid "add_arrays_from_data_frame"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.add_arrays_from_data_frame:1
msgid "Add all of the arrays from a given data frame to an output's data"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:19
msgid "convert_array"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:1
msgid "A helper to convert a NumPy array to a vtkDataArray or vice versa"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:3
msgid "A numpy array or vtkDataArry to convert"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:5
msgid "the name of the data array for VTK"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:7
msgid "if input is numpy array then deep copy values"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:9
msgid "if input is vtkDataArry, make a pandas DataFrame of the array"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_array:12
msgid "the converted array (if input is a NumPy ndaray then returns ``vtkDataArray`` or is input is ``vtkDataArray`` then returns NumPy ``ndarray``). If pdf==True and the input is ``vtkDataArry``, return a pandas DataFrame."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:26
msgid "convert_cell_conn"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.convert_cell_conn:1
msgid "Converts cell connectivity arrays to a cell matrix array that makes sense for VTK cell arrays."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:33
msgid "convert_string_array"
msgstr ""

#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.convert_string_array:1
msgid "Convert a numpy array of strings to a vtkStringArray or vice versa."
msgstr ""

#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.convert_string_array:3
msgid "Note that this is terribly inefficient - inefficient support is better than no support :). If you have ideas on how to make this faster, please consider opening a pull request."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:40
msgid "data_frame_to_table"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.data_frame_to_table:1
msgid "Converts a pandas DataFrame to a vtkTable"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:47
msgid "get_array"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.get_array:1
msgid "Given an input dataset, this will return the named array as a NumPy array or a vtkDataArray if spceified"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:54
msgid "get_data_dict"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.get_data_dict:1
msgid "Given an input dataset, this will return all the arrays in that object's cell/point/field/row data as named NumPy arrays in a dictionary."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:61
msgid "get_dtypes"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.get_dtypes:1
msgid "This converts char dtypes and an endian to a numpy and VTK data type."
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.get_dtypes:3
msgid "the numpy data type and the integer type id specified in vtkType.h for VTK data types"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:68
msgid "get_vtk_type"
msgstr ""

#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.get_vtk_type:1
msgid "Look up the VTK type for a give python data type."
msgstr ""

#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.get_vtk_type:3
msgid "Corrects for string type mapping issues."
msgstr ""

#: ../../../../.venv/lib/python3.7/site-packages/pyvista/utilities/helpers.py:docstring of pyvista.utilities.helpers.get_vtk_type:5
msgid "**int**"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:75
msgid "place_array_in_table"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:1
msgid "Takes a 1D/2D numpy array and makes a vtkTable of it"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:3
msgid "The 1D/2D array to be converted to a table"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:5
msgid "The titles for the arrays in the table. Must have same number of elements as columns in input ndarray"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:8
msgid "The output data object pointer"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.place_array_in_table:11
msgid "returns the same input pdo table"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:82
msgid "points_to_poly_data"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:1
msgid "Create ``vtkPolyData`` from a numpy array of XYZ points. If the points have more than 3 dimensions, then all dimensions after the third will be added as attributes. Assume the first three dimensions are the XYZ coordinates."
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:6
msgid "The points and pointdata"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:8
msgid "A flag on whether to append the z values as a PointData array"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.points_to_poly_data:12
msgid "points with point-vertex cells"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/interface.rst:89
msgid "table_to_data_frame"
msgstr ""

#: ../../PVGeo/PVGeo/interface.py:docstring of PVGeo.interface.table_to_data_frame:1
msgid "Converts a vtkTable to a pandas DataFrame"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/earth.rst:4
msgid "earth"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/earth.rst:12
msgid "Globe Source"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource:1
msgid "Creates a globe/sphere the size of the Earth with texture coordinates already mapped. The globe's center is assumed to be (0,0,0)."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource:4
msgid "the radius to use"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource:6
msgid "the number of parallels (latitude)"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource:8
msgid "the number of meridians (longitude)"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.RequestData:1
msgid "The pipeline executes this to generate output"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.build_globe:1
msgid "Generates the globe as ``vtkPolyData``"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.create_sphere:1
msgid "Creates longitude/latitude as 2D points and returns the corresponding texture coordinates for those positions."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.set_n_meridians:1
msgid "Set the number of meridians to use"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.set_n_parallels:1
msgid "Set the number of parallels to use"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.set_radius:1
#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.OutlineContinents.set_radius:1
msgid "Set the radius of the globe. Defualt is 6.371.0e9 meters"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.GlobeSource.spherical_to_cartesian:1
msgid "Converts longitude/latitude to catesian coordinates. Assumes the arguments are given in degrees."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/earth.rst:23
msgid "Outline Continents"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.OutlineContinents:1
msgid "A simple data source to produce a ``vtkEarthSource`` outlining the Earth's continents. This works well with our ``GlobeSource``."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/earth.py:docstring of PVGeo.model_build.earth.OutlineContinents.RequestData:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid.RequestData:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid.RequestData:1
msgid "Used by pipeline to generate the output"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/grids.rst:4
msgid "Grids"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/grids.rst:12
msgid "Create Even Rectilinear Grid"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid:1
msgid "This creates a vtkRectilinearGrid where the discretization along a given axis is uniformly distributed."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid.RequestInformation:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid.RequestInformation:1
msgid "Used by pipeline to handle output extents"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid.set_extent:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid.set_extent:1
msgid "Set the extent of the output grid."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid.set_x_range:1
msgid "Set range (min, max) for the grid in the X-direction."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid.set_y_range:1
msgid "Set range (min, max) for the grid in the Y-direction"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateEvenRectilinearGrid.set_z_range:1
msgid "Set range (min, max) for the grid in the Z-direction"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/grids.rst:23
msgid "Create Tensor Mesh"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh:1
msgid "This creates a vtkRectilinearGrid where the discretization along a given axis is not uniform. Cell spacings along each axis can be set via strings with repeating patterns or explicitly using the ``Set*Cells`` methods."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.RequestInformation:1
msgid "Used by pipeline to set output whole extent"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh._add_model_data:1
msgid "Add an array to the output data object. If data is None, random values will be generated."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh._make_model:1
msgid "Generates the output data object"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh._read_cell_line:1
msgid "Read cell sizes for each line in the UBC mesh line strings"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.get_extent:1
msgid "Get the extent of the created mesh"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_origin:1
msgid "Set the origin of the output"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_x_cells:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_x_cells_str:1
msgid "Set the spacings for the cells in the X direction"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_x_cells:3
msgid "the spacings along the X-axis"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_x_cells_str:3
msgid "the spacings along the X-axis in the UBC style"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_y_cells:1
#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_y_cells_str:1
msgid "Set the spacings for the cells in the Y direction"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_y_cells:3
msgid "the spacings along the Y-axis"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateTensorMesh.set_y_cells_str:3
msgid "the spacings along the Y-axis in the UBC style"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/grids.rst:34
msgid "Create Uniform Grid"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid:1
msgid "Create uniform grid (``vtkImageData``)"
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid.set_origin:1
msgid "Set the origin of the output grid."
msgstr ""

#: ../../PVGeo/PVGeo/model_build/grids.py:docstring of PVGeo.model_build.grids.CreateUniformGrid.set_spacing:1
msgid "Set the spacing for the points along each axial direction."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/model_build/index.rst:3
msgid "Model Builder"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/binaries.rst:4
msgid "Binary/Serialized File I/O"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/binaries.rst:12
msgid "Madagascar SSRSF Reader"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.MadagascarReader:1
msgid "Bases: :class:`PVGeo.readers.binaries.PackedBinariesReader`"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.MadagascarReader:1
msgid "This reads in float or double data that is packed into a Madagascar binary file format with a leader header. The reader ignores all of the ascii header details by searching for the sequence of three special characters: EOL EOL EOT and it will treat the followng binary packed data as one long array and make a ``vtkTable`` with one column of that data. The reader uses defaults to import as floats with native endianness. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We will later implement the ability to create a gridded volume from the header info. This reader is a quick fix for Samir. We chose to use a ``vtkTable`` object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository. `Details Here`_."
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.MadagascarReader._read_raw_file:1
msgid "Reads the raw data from the file for Madagascar SSRSF files"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/binaries.rst:23
msgid "Packed Binaries Reader"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader:1
msgid "This reads in float or double data that is packed into a binary file format. It will treat the data as one long array and make a ``vtkTable`` with one column of that data. The reader uses defaults to import as floats with native endianness. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We chose to use a ``vtkTable`` object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository."
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.RequestData:1
msgid "Used by pipeline to request data for current timestep"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader._get_file_contents:1
msgid "Interanl helper to get all contents for all files"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader._get_raw_data:1
msgid "This will return the proper data for the given timestep"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader._read_raw_file:1
msgid "Interanl helper to read the raw data from the file"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader._read_up_front:1
msgid "Should not need to be overridden"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.convert_array:1
msgid "Converts the numpy array to a vtkDataArray"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.get_data_name:1
msgid "Get name used for the data array"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.get_data_types:1
msgid "Get the data type of the binary file"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.get_endian:1
msgid "Get the endianness of the data file."
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.set_data_name:1
msgid "The string name of the data array generated from the inut file."
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.set_data_type:1
msgid "Set the data type of the binary file: `double='d'`, `float='f'`, `int='i'`"
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.set_endian:1
msgid "Set the endianness of the data file."
msgstr ""

#: ../../PVGeo/PVGeo/readers/binaries.py:docstring of PVGeo.readers.binaries.PackedBinariesReader.set_endian:3
msgid "no preference = '' or 0, Little = 1 or `<` or Big = 2 `>`."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/delimited.rst:4
msgid "Delimited File I/O"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/delimited.rst:12
msgid "Delimited Points Reader Base"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedPointsReaderBase:1
msgid "A base class for delimited text readers that produce ``vtkPolyData`` points."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedPointsReaderBase.get_copy_z:1
msgid "Get the status of whether or not to copy the Z-component of the points to the Point Data"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedPointsReaderBase.set_copy_z:1
msgid "Set whether or not to copy the Z-component of the points to the Point Data"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/delimited.rst:23
msgid "Delimited Text Reader"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader:1
msgid "This reader will take in any delimited text file and make a ``vtkTable`` from it. This is not much different than the default .txt or .csv reader in ParaView, however it gives us room to use our own extensions and a little more flexibility in the structure of the files we import."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._extract_header:1
msgid "Override this. Removes header from single file's content."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._extract_headers:1
msgid "Should NOT be overriden. This is a convienance methods to iteratively get all file contents. Your should override ``_extract_header``."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._file_contents_to_data_frame:1
msgid "Should NOT need to be overriden. After ``_extract_headers`` handles removing the file header from the file contents, this method will parse the remainder of the contents into a pandas DataFrame with column names generated from the titles resulting from in ``_extract_headers``."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._get_delimiter:1
msgid "For itenral use only!"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._get_file_contents:1
msgid "This grabs the lines of the input data file as a string array. This allows us to load the file contents, parse the header then use numpy or pandas to parse the data."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader._get_raw_data:1
msgid "This will return the proper data for the given timestep as a dataframe"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.get_skip_rows:1
msgid "Get the integer number of rows to skip at the top of the file."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.get_split_on_white_space:1
msgid "Returns the status of how the delimiter interprets whitespace"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.has_titles:1
msgid "Get the boolean for if the delimited file has header titles for the data arrays."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_comments:1
msgid "The character identifier for comments within the file."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_delimiter:1
msgid "The input file's delimiter. To use a tab delimiter please use ``set_split_on_white_space()``"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_delimiter:4
msgid "a string delimiter/seperator"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_has_titles:1
msgid "Set the boolean for if the delimited file has header titles for the data arrays."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_skip_rows:1
msgid "Set the integer number of rows to skip at the top of the file."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.DelimitedTextReader.set_split_on_white_space:1
msgid "Set a boolean flag to override the ``set_delimiter()`` and use any white space as a delimiter."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/delimited.rst:34
msgid "XYZ Text Reader"
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.XYZTextReader:1
msgid "A makeshift reader for XYZ files where titles have comma delimiter and data has space delimiter."
msgstr ""

#: ../../PVGeo/PVGeo/readers/delimited.py:docstring of PVGeo.readers.delimited.XYZTextReader._extract_header:1
msgid "Internal helper to parse header details for XYZ files"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/readers/index.rst:3
msgid "General Readers"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/disc_meshes.rst:4
msgid "Discretize"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/disc_meshes.rst:12
msgid "Discretize Mesh Reader"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/disc_meshes.py:docstring of PVGeo.ubc.disc_meshes.DiscretizeMeshReader:1
msgid "Bases: :class:`PVGeo.base.InterfacedBaseReader`"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/disc_meshes.py:docstring of PVGeo.ubc.disc_meshes.DiscretizeMeshReader:1
msgid "A general reader for all ``discretize`` mesh objects saved to the ``.json`` serialized format"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/disc_meshes.py:docstring of PVGeo.ubc.disc_meshes.DiscretizeMeshReader._get_vtk_object:1
msgid "Returns the mesh's proper VTK data object"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/disc_meshes.py:docstring of PVGeo.ubc.disc_meshes.DiscretizeMeshReader._read_file:1
msgid "Reads a mesh object from the serialized format"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/general.rst:4
msgid "General Tools"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/general.rst:12
msgid "UBC Geology Mapper"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper:1
msgid "A filter to load a GIF geology definity file and map its values to a given data array in an input data object."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.SetFileName:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.set_file_name:1
msgid "Set the file name to read"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper._map_values:1
msgid "Map the values defined by ``geol`` dataframe to the values in ``arr``. The first column (name should be ``Index``) will be used for the mapping."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper._read_definitions:1
msgid "Reades the geology definition file as a pandas DataFrame"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GeologyMapper.set_delimiter:1
msgid "Set the delimiter of the ASCII file"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/general.rst:23
msgid "GIF Gravity Gradiometry Observations"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GravGradReader:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GravObsReader:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.MagObsReader:1
#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.TopoReader:1
msgid "Bases: :class:`PVGeo.readers.delimited.DelimitedPointsReaderBase`"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GravGradReader:1
msgid "Read `GIF Gravity Gradiometry Observations`_ file."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GravGradReader._extract_header:1
msgid "Internal helper to parse header details for UBC Gravity Gradiometry files"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/general.rst:34
msgid "UBC Gravity Observations"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GravObsReader:1
msgid "Read `GIF Gravity Observations`_ file."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.GravObsReader._extract_header:1
msgid "Internal helper to parse header details for UBC Gravity Observation files"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/general.rst:45
msgid "UBC Magnetic Observations"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.MagObsReader:1
msgid "Read `GIF Magnetic Observations`_ file."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.MagObsReader._extract_header:1
msgid "Internal helper to parse header details for UBC Magnetic Observations files"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.MagObsReader.convert_vector:1
msgid "Converts inclination, declinations, and magntidue to an XYZ vector"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/general.rst:56
msgid "GIF Topo Reader"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.TopoReader:1
msgid "A reader to handle .topo files in UBC format to create a topography surface."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/general.py:docstring of PVGeo.ubc.general.TopoReader._extract_header:1
msgid "Internal helper to parse header details for UBC Topo files"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/index.rst:3
msgid "UBC Mesh Tools"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/octree.rst:4
msgid "OcTree Mesh"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/octree.rst:12
msgid "UBC OcTree Mesh Appender"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeAppender:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshAppender:1
msgid "Bases: :class:`PVGeo.ubc.two_file_base.ModelAppenderBase`"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeAppender:1
msgid "This filter reads a timeseries of models and appends it to an input ``vtkUnstructuredGrid``"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeAppender._place_on_mesh:1
msgid "Internal helper to place a model on the mesh for a given index"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/octree.rst:23
msgid "UBC OcTree Mesh Reader"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader:1
msgid "Bases: :class:`PVGeo.ubc.two_file_base.ubcMeshReaderBase`"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader:1
msgid "This class reads a UBC OcTree Mesh file and builds a ``vtkUnstructuredGrid`` of the data in the file. Model File is optional. Reader will still construct ``vtkUnstructuredGrid`` safely."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.RequestInformation:1
msgid "Pipeline method for handling requests about the grid extents and time step values"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:1
msgid "Wrapper to Read UBC GIF OcTree mesh and model file pairs. UBC OcTree models are defined using a 2-file format. The \"mesh\" file describes how the data is descritized. The \"model\" file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. This only handles OcTree formats"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:7
msgid "The OcTree Mesh filename as an absolute path for the input mesh file in UBC OcTree Mesh Format"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:13
msgid "filename_models (list(str)): The model filenames as absolute paths for"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:12
msgid "the input model timesteps in UBC OcTree Model Format. output (vtkUnstructuredGrid): The output data object"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.__ubc_octree:15
msgid "A ``vtkUnstructuredGrid`` generated from the UBC 2D/3D Mesh grid. Mesh is defined by the input mesh file. Cell data is defined by the input model file."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.clear_mesh:1
msgid "Use to clean/rebuild the mesh."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.clear_models:1
msgid "Use to clean the models and reread the data"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:1
msgid "Places model data onto a mesh. This is for the UBC Grid data reaers to associate model data with the mesh grid."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:4
msgid "The ``vtkUnstructuredGrid`` that is the mesh to place the model data upon. Needs to have been read in by ubcOcTree"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:7
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:7
msgid "A NumPy float array that holds all of the data to place inside of the mesh's cells."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:10
msgid "The name of the model data array once placed on the ``vtkUnstructuredGrid``."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.place_model_on_octree_mesh:14
msgid "The input ``vtkUnstructuredGrid`` with model data appended."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:1
msgid "This method reads a UBC OcTree Mesh file and builds a ``vtkUnstructuredGrid`` of the data in the file. This method generates the ``vtkUnstructuredGrid`` without any data attributes."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:5
msgid "The mesh filename as an absolute path for the input mesh file in UBC OcTree format."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:8
msgid "A pointer to the output data object."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/octree.py:docstring of PVGeo.ubc.octree.OcTreeReader.ubc_octree_mesh:11
msgid "a ``vtkUnstructuredGrid`` generated from the UBCMesh grid. Mesh is defined by the input mesh file. No data attributes here, simply an empty mesh. Use the ``place_model_on_octree_mesh()`` method to associate with model data."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/tensor.rst:4
msgid "Tensor Mesh"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/tensor.rst:12
msgid "UBC Tensor Mesh Appender"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshAppender:1
msgid "This filter reads a timeseries of models and appends it to an input ``vtkRectilinearGrid``"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshAppender._place_on_mesh:1
msgid "Internal helepr to place a model on the mesh for a given index"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshAppender._read_up_front:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender._read_up_front:1
msgid "Internal helepr to read data at start"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/tensor.rst:23
msgid "UBC Tensor Mesh Reader"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader:1
msgid "UBC Mesh 2D/3D models are defined using a 2-file format. The \"mesh\" file describes how the data is discretized. The \"model\" file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The reader will automatically detect if the mesh is 2D or 3D and read the remainder of the data with that dimensionality assumption. If the mesh file is 2D, then then model file must also be in the 2D format (same for 3D)."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader:11
msgid "Model File is optional. Reader will still construct ``vtkRectilinearGrid`` safely."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.RequestData:1
msgid "Handles data request by the pipeline."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.RequestInformation:1
msgid "Handles info request by pipeline about timesteps and grid extents."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_mesh_data_2d:1
msgid "Helper method to read a 2D mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_mesh_data_3d:1
msgid "Helper method to read a 3D mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:1
msgid "Wrapper to Read UBC GIF 2D and 3D meshes. UBC Mesh 2D/3D models are defined using a 2-file format. The \"mesh\" file describes how the data is descritized. The \"model\" file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. If the mesh file is 2D, then then model file must also be in the 2D format (same for 3D)."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:8
msgid "The mesh filename as an absolute path for the input mesh file in UBC 2D/3D Mesh Format"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:11
msgid "The model filename(s) as an absolute path for the input model file in UBC 2D/3D Model Format."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:14
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:9
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:7
msgid "The output data object"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.__ubc_tensor_mesh:17
msgid "a ``vtkRectilinearGrid`` generated from the UBC 2D/3D Mesh grid. Mesh is defined by the input mesh file. Cell data is defined by the input model file."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.clear_mesh:1
msgid "Use to clean/rebuild the mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.clear_models:1
msgid "Use to clean the models and reread"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:4
msgid "The ``vtkRectilinearGrid`` that is the mesh to place the model data upon."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:10
msgid "The name of the model data array once placed on the ``vtkRectilinearGrid``."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.place_model_on_mesh:14
msgid "Returns the input ``vtkRectilinearGrid`` with model data appended."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:1
msgid "This method reads a UBC 2D Mesh file and builds an empty ``vtkRectilinearGrid`` for data to be inserted into. `Format Specs`_."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:6
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:4
msgid "The mesh filename as an absolute path for the input mesh file in UBC 3D Mesh Format."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_2d:12
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:10
msgid "a ``vtkRectilinearGrid`` generated from the UBC 3D Mesh grid. Mesh is defined by the input mesh file. No data attributes here, simply an empty mesh. Use the ``place_model_on_mesh()`` method to associate with model data."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_mesh_3d:1
msgid "This method reads a UBC 3D Mesh file and builds an empty ``vtkRectilinearGrid`` for data to be inserted into."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:1
msgid "Reads a 2D model file and returns a 1D NumPy float array. Use the ``place_model_on_mesh()`` method to associate with a grid."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:4
msgid "Only supports single component data"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:6
msgid "The model filename as an absolute path for the input model file in UBCMesh Model Format. Also accepts a list of string file names."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TensorMeshReader.ubc_model_2d:11
msgid "a NumPy float array that holds the model data read from the file. Use the ``place_model_on_mesh()`` method to associate with a grid. If a list of file names is given then it will return a dictionary of NumPy float array with keys as the basenames of the files."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/tensor.rst:34
msgid "Append UBC Discrete Topography"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender:1
msgid "This filter reads a single discrete topography file and appends it as a boolean data array."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.Modified:1
#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.modified:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.Modified:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.modified:1
msgid "Call modified if the files needs to be read again again."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender._place_on_mesh:1
msgid "Internal helepr to place an active cells model on the mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.clear_topo_file:1
msgid "Use to clear data file name."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.need_to_read:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.need_to_read:1
msgid "Ask self if the reader needs to read the files again"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.need_to_read:3
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.need_to_read:3
msgid "if the flag is set then this method will set the read status"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.need_to_read:7
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.need_to_read:7
msgid "The status of the reader aspect of the filter."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/tensor.py:docstring of PVGeo.ubc.tensor.TopoMeshAppender.set_topo_filename:1
msgid "Use to set the file names for the reader. Handles single strings only"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/two_file_base.rst:12
msgid "Model Appender Base"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase:1
msgid "A base class for create mesh-model appenders on the UBC Mesh formats"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.RequestInformation:1
msgid "Used by pipeline to handle time variance and update output extents"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.clear_models:1
msgid "Use to clear data file names."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.get_data_name:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.get_data_name:1
msgid "Get the data array name"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.has_models:1
msgid "Return True if models are associated with this mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.set_data_name:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.set_data_name:1
msgid "Set the data array name"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ModelAppenderBase.set_use_filename:1
#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.set_use_filename:1
msgid "Set a flag on whether or not to use the filename as the data array name"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/two_file_base.rst:23
msgid "UBC Mesh Reader Base"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase:1
msgid "Bases: :class:`PVGeo.base.TwoFileReaderBase`"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase:1
msgid "A base class for the UBC mesh readers"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase._read_extent:1
msgid "Reads the mesh file for the UBC 2D/3D Mesh or OcTree format to get output extents. Computationally inexpensive method to discover whole output extent."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase._read_extent:5
msgid "This returns a tuple of the whole extent for the grid to be made of the input mesh file (0,n1-1, 0,n2-1, 0,n3-1). This output should be directly passed to set the whole output extent."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase._ubc_mesh_2d_part:1
msgid "Internal helper to read 2D mesh file"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.is_2d:1
msgid "Returns true if mesh is spatially references in only two dimensions"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.is_3d:1
msgid "Returns true if mesh is spatially references in three dimensions"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.ubc_model_3d:1
msgid "Reads the 3D model file and returns a 1D NumPy float array. Use the place_model_on_mesh() method to associate with a grid."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.ubc_model_3d:4
msgid "The model file name(s) as an absolute path for the input model file in UBC 3D Model Model Format. Also accepts a `list` of string file names."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/two_file_base.py:docstring of PVGeo.ubc.two_file_base.ubcMeshReaderBase.ubc_model_3d:9
msgid "Returns a NumPy float array that holds the model data read from the file. Use the ``place_model_on_mesh()`` method to associate with a grid. If a list of file names is given then it will return a dictionary of NumPy float array with keys as the basenames of the files."
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/write.rst:4
msgid "Writers"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/write.rst:12
msgid "Write ``vtkImageData`` to UBC Tensor Mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/write.py:docstring of PVGeo.ubc.write.WriteImageDataToUBC:1
#: ../../PVGeo/PVGeo/ubc/write.py:docstring of PVGeo.ubc.write.WriteRectilinearGridToUBC:1
msgid "Bases: :class:`PVGeo.ubc.write.ubcTensorMeshWriterBase`"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/write.py:docstring of PVGeo.ubc.write.WriteImageDataToUBC:1
msgid "Writes a ``vtkImageData`` (uniform grid) data object to the UBC Tensor Mesh format. This file reader currently only handles 3D data."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/write.py:docstring of PVGeo.ubc.write.WriteImageDataToUBC.perform_write_out:1
msgid "Write out a ``vtkImageData`` to the UBC file format"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/ubc/write.rst:23
msgid "Write ``vtkRectilinearGrid`` to UBC Tensor Mesh"
msgstr ""

#: ../../PVGeo/PVGeo/ubc/write.py:docstring of PVGeo.ubc.write.WriteRectilinearGridToUBC:1
msgid "Writes a ``vtkRectilinearGrid`` data object to the UBC Tensor Mesh format. This file reader currently only handles 3D data."
msgstr ""

#: ../../PVGeo/PVGeo/ubc/write.py:docstring of PVGeo.ubc.write.WriteRectilinearGridToUBC.perform_write_out:1
msgid "Write out a ``vtkRectilinearGrid`` to the UBC file format"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/version.rst:4
msgid "Version Verifier"
msgstr ""

#: ../../PVGeo/docs/source/content/PVGeo/version.rst:12
msgid "check_numpy"
msgstr ""

#: ../../PVGeo/PVGeo/version.py:docstring of PVGeo.version.check_numpy:1
msgid "A method to check the active environment's version of NumPy for compatibility with PVGeo."
msgstr ""

#: ../../PVGeo/PVGeo/version.py:docstring of PVGeo.version.check_numpy:4
msgid "raise a ``'warn'`` (warning) or an ``'error'`` (PVGeoError) if NumPy is not at a satisfactory version."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:3
#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:158
msgid "Export"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:5
msgid "On this page, we demonstrate how to quickly share a 3D rendering of your ParaView visualizations with anyone who has access to the internet so that that can explore the whole scene in a dynamic manner."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:10
msgid "Motivation"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:11
msgid "In order to effectively communicate our geoscientific findings, we often need to share our 3D visualizations with interested stakeholders. These interested parties are likely not going to have ParaView or other visualization software at hand. Thus we desire to have a means to export our complex visualizations in ParaView to a simple, shareable format that anyone can view. To accomplish this, we will take advantage of vtk.js and its standalone web viewer for vtk.js formats."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:19
msgid "Would not it be great to send your client or interested parties an interactive 3D scene of your Geophysical findings like the example below?"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:31
msgid "VTK.js"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:33
msgid "`vtk.js <https://kitware.github.io/vtk-js/>`_ is a rendering library made for scientific visualization on the web. This code base brings high performance rendering into anyone's web browser. This library allows us to export complex scenes from ParaView and share them with anyone that has a web browser like Safari or Google Chrome."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:39
msgid "The vtk.js library has an open-source `standalone scene viewer <https://kitware.github.io/vtk-js/examples/StandaloneSceneLoader/StandaloneSceneLoader.html>`_ which they have a `nice demo <https://kitware.github.io/vtk-js/examples/StandaloneSceneLoader.html>`_. The first link can either be downloaded as an HTML file to be ran locally, or you can go to that link and run from the vtk.js server. vtk.js also published a scene export macro for ParaView that compresses a data scene in ParaView to a shareable format for viewing on the web. The `macro from the vtk.js library <https://raw.githubusercontent.com/Kitware/vtk-js/master/Utilities/ParaView/export-scene-macro.py>`_ can be used but we also deploy an updated (we think more robust) version of this export macro in the sub-module `export` of our Python module `pvmacros`."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:49
msgid "Demo Shareable Format"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:51
msgid "Here are some samples to demonstrate the web viewer which we host on `viewer.pyvista.org <http://viewer.pyvista.org>`_. We have included a few of our scenes and one of the vtk.js sample scenes for you to demo:"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:55
msgid "`Fluvial Channels <http://viewer.pyvista.org/?fileURL=https://dl.dropbox.com/s/qnahdwedjwndo7t/fluvsim_channels.vtkjs?dl=0>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:56
msgid "`Volcano <http://volcano.pvgeo.org>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:57
msgid "`Ripple <http://ripple.pvgeo.org>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:58
msgid "`Tunnels <http://tunnels.pvgeo.org>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:59
msgid "`vtk.js Sample Scene <http://viewer.pyvista.org/?fileURL=https://data.kitware.com/api/v1/file/587003c38d777f05f44a5c93/download>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:64
msgid "Example Use"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:66
msgid "First, make a complex scene in ParaView that you might like to share with someone. Now that you have your scene loaded, open the python shell from'View->Python Shell' (or 'Tools->Python Shell' depending on your ParaView version) within ParaView. From here, import our Python module delivered in the repository called ``#!py pvmacros``. From the ``#!py export`` sub-module, there is a function called ``#!py def exportVTKjs()`` which takes two optional arguments (`FileName` string and `compress` boolean). Execute this function and note the output text as it will describe where the exported scene was saved."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:84
msgid "Now open the standalone web viewer by opening `viewer.pyvista.org <http://viewer.pyvista.org>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:86
msgid "Select the exported scene as the input file for the web viewer from where you saved it (should be under ``~/Dropbox/PVGeo_vtkjs/``). The export macro should have printed out the location of the saved scene in the Python Shell."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:90
msgid "If you have trouble post on our `issues page <https://github.com/OpenGeoVis/PVGeo/issues>`_ or read the `vtk.js documentation <https://kitware.github.io/vtk-js/examples/StandaloneSceneLoader.html>`_"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:95
msgid "How to Share"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:97
msgid "To share these exported scenes with non-technical stakeholders, we recommend the following processes:"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:101
msgid "Quick and Easy"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:103
msgid "Create your scene and export to the vtk.js format (follow process above)"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:104
msgid "Quality control your visualization by viewing in web browser yourself (follow process above)"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:105
msgid "Send an email with your visualization (``*.vtkjs`` file) and something along the lines of:"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:116
msgid "A Bit More Robust"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:118
msgid "Sometimes we might want to give someone a direct link to the web visualization so all they have to do is open the link on any device and they can see our visualization. Here is a method to share scenes that have a slightly easier process of viewing the file for the end user and will handle the case for mobile platforms."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:124
msgid "Unfortunately, making the experience for the end user simple means making your experience a bit more complicated. You will need to host your file on a web service like GitHub or Dropbox *(we have been unsuccessful in getting Google Drive to work)*. Then get a public link to the `*.vtkjs` file on that web service and append it to the web viewer URL."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:130
msgid "We have created a Python script to generate these links for you if you are sharing your data file on either Dropbox or GitHub. The script is delivered in the repository."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:134
msgid "The easiest way that we have found is to share the files on Dropbox. Use the desktop client for Dropbox and right-click your exported `*.vtkjs` file and select \"Copy Dropbox Link.\""
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/index.rst:138
msgid "Once you have that link, use the this script on your URLs in this manner:"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/vtkjs.rst:4
msgid "vtkjs"
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs:1
msgid "The ``export`` module privides a few macros for exporting data scenes within ParaView's rendering environment to the VTKjs format."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/vtkjs.rst:12
msgid "Export VTKjs"
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:1
msgid "This function will execute a script to export the current scene from your rendering into the VTKjs shareable file format."
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:3
msgid "Use to specify the basename of the output file. Extension will always be '.vtkjs'"
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:5
msgid "Declares a preference to compress the data arrays. Defaults to False."
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:8
msgid "Prints the path to the saved '.vtkjs' file."
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:13
msgid "To view, open the file in the VTKjs standalone web viewer `found here`_"
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.exportVTKjs:14
msgid "Use the ``get_vtkjs_url.py`` script in the ``PVGeo`` repository to get a shareable link for the exported file."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/export/vtkjs.rst:19
msgid "Get VTKjs URL"
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.getVTKjsURL:1
msgid "After using ``exportVTKjs()`` to create a ``.vtkjs`` file from a ParaView data scene which is uploaded to an online file hosting service like Dropbix, use this method to get a shareable link to that scene on the `PVGeo VTKjs viewer`_."
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.getVTKjsURL:8
msgid "**Current file hosts supported:** - Dropbox - GitHub"
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.getVTKjsURL:12
msgid "the name of the file hosting service."
msgstr ""

#: ../../PVGeo/pvmacros/export/vtkjs.py:docstring of pvmacros.export.vtkjs.getVTKjsURL:14
msgid "the web URL to the ``.vtkjs`` file."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/index.rst:26
#: ../../PVGeo/docs/source/content/pvmacros/index.rst:26
msgid "ParaView Macros:"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/index.rst:2
msgid "About ParaView Macros"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/index.rst:10
msgid "We will from now on refer to macros as a set of standard codes that can be used regardless of data sets or scenes in ParaView. ParaView's sense of macro is not robust enough for us so that we will be referring to traditional macros in ParaView as 'scripts' from here on."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/index.rst:15
msgid "*Scripts are used on specific sets of data whereas macros can be used on any set of data.*"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/index.rst:18
msgid "Macros, all of the ``pvmacros`` module, are standard codes that can be used regardless of data sets or scenes in ParaView. These codes complete tedious or recurring tasks either in ParaView's GUI or ParaView's batch processing environment. We will use macros to complete everyday tasks like saving screenshots of isometric views of a data scene or tedious tasks like making many slices of a single data set along a line."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/pipeline.rst:4
msgid "Pipeline"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/pipeline.rst:12
msgid "Delete Downstream Filters"
msgstr ""

#: ../../PVGeo/pvmacros/pipeline.py:docstring of pvmacros.pipeline.deleteDownstream:1
msgid "Delete downstream filters for a given input source. If no input source provided, all filters on the pipeline will be deleted."
msgstr ""

#: ../../PVGeo/pvmacros/pipeline.py:docstring of pvmacros.pipeline.deleteDownstream:4
msgid "The name of the object on the pipeline to preserve."
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/axes.rst:4
msgid "axes"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/axes.rst:12
msgid "Custom Axis Ticks"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.customAxisTicks:1
msgid "Use to set custom axis ticks in the render view"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.customAxisTicks:3
msgid "A list or tuple of floats for the axis ticks"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.customAxisTicks:5
#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.resetAxisTicks:3
msgid "The axis to set (X=0, Y=1, or Z=2)"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.customAxisTicks:7
msgid "An optional flag to use the given range on all axii"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/axes.rst:19
msgid "Reset Axis Ticks"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.resetAxisTicks:1
msgid "Use to reset the axis ticks in the render view for any given axii"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/axes.rst:26
msgid "Scale Axis"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.scaleAxis:1
msgid "Use to scale an axis visually"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/axes.rst:33
msgid "Set Axis Labels from Bounds"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.setAxisLabelsFromBounds:1
msgid "Sets the axis labels from a given input data source. Use the num argument to control the number of labels along each axis. If num is a scalar, then a uniform number of labels is used on each axis."
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.setAxisLabelsFromBounds:5
msgid "The string name of the input source on the data pipeline"
msgstr ""

#: ../../PVGeo/pvmacros/vis/axes.py:docstring of pvmacros.vis.axes.setAxisLabelsFromBounds:7
msgid "the number of labels for each axis"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/index.rst:3
msgid "Visualization"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/objs.rst:4
msgid "objs"
msgstr ""

#: ../../PVGeo/docs/source/content/pvmacros/vis/objs.rst:12
msgid "Camera"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera:1
msgid "An object to store a single camera location/view. You can make a list/dict of these objects to save interesting views for your project. This object saves just a few parameters about the camera so that it can easily be reconstructed."
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.loadViews:1
msgid "Load a file containg a serialized camera objects. Dafault loads from home directory if relative path"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.loadViews:3
msgid "The file basename for the serialized file (defualt is default for output def)"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.loadViews:5
msgid "The directory from which you wish to load the views. Defaults to user home directory for relative paths."
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.saveViews:1
msgid "Save a serialized dictionaty/list/whatever of views out to a file. Dafault saves to user's home directory"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.saveViews:3
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShotViews:3
msgid "some iterable object containg multiple `camera` objects"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.saveViews:5
msgid "The file basename for the serialized file"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.saveViews:7
msgid "The directory you wish to save the views. Defaults to user home directory"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShot:1
msgid "Save a screenshot of a single camera view"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShot:3
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShotViews:5
msgid "The camera you wish to view then save a screenshot"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShot:5
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShotViews:7
msgid "The directory you wish to save the screenshot. Defaults to user home directory"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShot:7
#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShotViews:9
msgid "The file basename for the screenshot"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.screenShotViews:1
msgid "Save screenshots of many views/cameras"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.update:1
msgid "Updates the camera location to that which is in the currently activated view unless a vtkOpenGLCamera is specified."
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.update:3
msgid "The camera you wish to update this object to. Totally optional"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.view:1
msgid "Use this method to update the camera to the saved location"
msgstr ""

#: ../../PVGeo/pvmacros/vis/objs.py:docstring of pvmacros.vis.objs.camera.view:3
msgid "The camera you wish to view/update in the current render view"
msgstr ""
